#!/bin/bash

# Function to extract the latest version from the "versions" array
get_latest_version() {
  # Parse the JSON response using jq and filter the latest version
  latest_version=$(echo "$1" | jq -r '.items[0].spec.versions | sort_by(.version) | reverse | .[0].version')

  echo "$latest_version"
}
grep -o '"versions": \[[^]]*\]' <<< "$api_response"

grep -o '"version" : "[^"]*"' <<< "$api_response" | sed -E 's/"version" : "v?([^"]*)"/\1/' | sort -rV | head -1
grep -o '"version" : "[^"]*"' <<< "$api_response" | grep -oP '(?<="version" : ")[^"]*' | grep -v '^v'
grep -o '[0-9.]*' | sort -t. -k1,1nr -k2,2nr -k3,3nr -k4,4nr | head -1
your_grep_command | grep -o '[0-9.]*' | sort -t. -k1,1nr -k2,2nr -k3,3nr -k4,4nr | head -1 | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g'




# Your cURL command to get the API response
api_response=$(curl -s "https://test.com")  # Replace with the actual API endpoint URL

# Call the function to get the latest version
latest_version=$(get_latest_version "$api_response")

echo "Latest Version: $latest_version"

every commit in feature brach, creates new docker image. eg:- <image-name>:<branch>-<commit-short-sha>
Developers should be able deploy this intermediate feature images to Dev env (to a seperate namespace) by updating the helm chart in devops repo 
A new tag should be created when a feature branch is merged to main

find kube-test -type f -exec sed -i 's/my-name-is-sooraj/new-string/g' {} +

    - kubectl exec <pod-name> -- nohup jmeter -n -t /path/to/your/testplan.jmx -l /path/to/results.jtl &
    - ./wait_for_jmeter_completion.sh <pod-name> <container-name>

#!/bin/bash

pod_name="$1"
container_name="$2"

while true; do
  status=$(kubectl exec "$pod_name" -- ps -ef | grep 'nohup jmeter' | grep -v 'grep')
  if [ -z "$status" ]; then
    echo "JMeter process has completed"
    exit 0
  fi
  sleep 10
done

sed -i "s/^\( *\)tag:.*/\1tag: $dockertag/" input.yml

