pipeline {
    agent any

    stages {
        stage('Modify Version - djangotag') {
            steps {
                script {
                    def key1 = 'djangotag'
                    def buildId = env.BUILD_NUMBER.toInteger()
                    def pocBuild = "poc-${buildId}"

                    sh """#!/bin/bash
                        # Create a temporary file to store the modified contents for djangotag
                        temp_file=\$(mktemp)

                        # Read the file line by line, replace the target key's value, and write to the temporary file
                        while IFS=':' read -r k v; do
                            if [[ \$k == '$key1' ]]; then
                                echo \"\$k:${pocBuild}\" >> \"\$temp_file\"
                            else
                                echo \"\$k:\$v\" >> \"\$temp_file\"
                            fi
                        done < 'version.txt'

                        # Replace the original file with the modified contents for djangotag
                        mv \"\$temp_file\" 'version.txt'

                        echo 'djangotag updated.'
                    """
                }
            }
        }
        stage('Modify Version - djangotag2') {
            steps {
                script {
                    def key2 = 'djangotag2'
                    def buildId = env.BUILD_NUMBER.toInteger()

                    sh """#!/bin/bash
                        # Create a temporary file to store the modified contents for djangotag2
                        temp_file=\$(mktemp)

                        # Read the file line by line, replace the target key's value, and write to the temporary file
                        while IFS=':' read -r k v; do
                            if [[ \$k == '$key2' ]]; then
                                version=\$(echo \$v | awk -F. -v buildId=\$buildId '{\$3+=1; print \$1\".\"\$2\".\"\$3}')
                                echo \"\$k:\$version\" >> \"\$temp_file\"
                            else
                                echo \"\$k:\$v\" >> \"\$temp_file\"
                            fi
                        done < 'version.txt'

                        # Replace the original file with the modified contents for djangotag2
                        mv \"\$temp_file\" 'version.txt'

                        echo 'djangotag2 updated.'
                    """
                }
            }
        }
//        stage('Push to Template Branch') {
//            steps {
//                script {
//                    withCredentials([usernamePassword(credentialsId: 'your-github-credentials-id', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
//                        def gitUrl = 'https://github.com/sooraj-sky/jenkins.git'
//                        def repoDir = 'my-repo'
//                        sh "rm -rf ${repoDir}"
//                        sh "git clone --branch template ${gitUrl} ${repoDir}"
//                        sh "cp version.txt ${repoDir}/version.txt"
//                        sh "cd ${repoDir} && git config user.email 'jenkins@your-domain.com'"
//                       sh "cd ${repoDir} && git config user.name 'Jenkins'"
//                        sh "cd ${repoDir} && git add version.txt"
//                        sh "cd ${repoDir} && git commit -m 'Update version.txt'"
//                        sh "cd ${repoDir} && git push origin template"
//                    }
//                }
//            }
//        }
    }
}
